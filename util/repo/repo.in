#####################################################################
#VARIABLES
#####################################################################
REPODIR=util/repo/
include $(REPODIR)/reporc
BRANCH=$(shell bash $(UTIL)/repo/getbranch.sh)

#####################################################################
#REPO INSTALL
#####################################################################
repo:
	@echo "Creating a new repo..."	
	@bash $(REPODIR)/create_repo.sh USER=$(USER)

deps:
	@echo "Checking for dependencies..."
	@bash $(REPODIR)/deps.sh

#####################################################################
#GIT RULES
#####################################################################
commit:
	@echo "Commiting..."
	@-git commit -am "Commit"
	@-git push origin $(BRANCH)

status:
	@echo "Git Status..."
	@-git status

pull:
	@echo "Pulling new files..."
	@-git reset --hard HEAD
	@-git pull origin $(BRANCH)

branch:
	@echo "We are in branch '$(BRANCH)'"

repo_install:
	@echo "Installing repo..."
	@npack
	@bash $(REPODIR)//deps.sh unzip
	@bash $(REPODIR)//install.sh

#####################################################################
#TEST COMPILATION RULES
#####################################################################
CTXXFLAGS=$(CXXFLAGS) --coverage -fprofile-arcs -g -O0
LTXXFLAGS=$(LXXFLAGS) -lcppunit --coverage -fprofile-arcs

%.$(OUT)_run:
	@make $(@:_run=)
	@./$(@:_run=)

%.tout:%.to
	$(CPP) $^ $(LTXXFLAGS) -o $@

%.to:%.cpp
	$(CPP) -c $(CTXXFLAGS) $^ -o $@

#####################################################################
#COVERAGE
#####################################################################
coverage:
	@echo "Executing coverage..."
	@bash $(REPODIR)//deps.sh coverage
	@bash $(REPODIR)//c-coverage.sh
	@bash $(REPODIR)//python-coverage.sh

test:
	bash test_c.sh
	bash test_python.sh

#####################################################################
#REPO RULES
#####################################################################
cleanrepo:
	@echo "Cleaning repo files..."
	@-find . -name ".coverage" -delete
	@-find . -name ".scannerwork" -type d | xargs rm -fr
	@-find $(REPODIR) -name "*.zip" -type f -delete
	@-find $(REPODIR) -name "*.log" -delete
	@-find $(REPODIR)/ -name "*.bak" -delete
	@-find $(REPODIR)/ -name "*.log" -delete
	@-find $(REPODIR)/ -name "*.xml" -delete
	@-find $(REPODIR)/ -name "*.html" -delete
	@-find $(REPODIR)/ -name "python-coverage-html" -type d | xargs rm -fr
	@-find $(REPODIR)/ -name "c-coverage-html" -type d | xargs rm -fr
	@-find $(REPODIR)//build/ -name "*.json" -delete
	@-find $(REPODIR)//build/ -name "*.log" -delete

files:clean
	@echo "Generating list of files..."
	@bash $(REPODIR)/files.sh 

updatefiles:
	@echo "Getting list of files..."
	@curl -s -o $(REPODIR)/repofiles.list https://raw.githubusercontent.com/$(GITREPO)/$(BRANCH)/$(REPODIR)/repofiles.list

update:updatefiles
	@echo "Updating files $(UPDATEFILES)..."
	@bash $(REPODIR)/update.sh $(UPDATEFILES)

#####################################################################
#SONAR RULES
#####################################################################
build:
	@echo "Executing build-wrapper..."
	@bash $(REPODIR)//deps.sh build-wrapper
	@bash $(REPODIR)//build.sh

#!!Prerequisite order is strict!!
sonar:build test coverage
	@echo "Executing sonar-scanner..."
	@bash $(REPODIR)//deps.sh sonar-scanner
	@bash $(REPODIR)//sonar.sh $(OPT)

sonar_install:
	@echo "Installing sonar binaries..."

#####################################################################
#WEB TOOLS
#####################################################################
HTTPCMD=$(PYTHON) -m $(HTTPSERVER) 9000
JUPYCMD=jupyter-notebook --no-browser --port=8888

PID=$(shell ps -eaf |grep '$(HTTPCMD)' |grep -v grep |cut -f 2 -d' ')
JPID=$(shell ps -eaf |grep '$(JUPYCMD)' |grep -v grep |cut -f 2 -d' ')

showhtml:
	@echo "Web processes:"
	@echo "Simple http server:"
	@-ps -eaf |grep '$(HTTPCMD)' |grep -v grep
	@echo "To kill it: make killhtml"
	@echo "Jupyter server:"
	@-jupyter notebook list
	@echo "To kill it: make killjupyter"

killhtml:
	@echo "Killing html process..."
	@kill -9 $(PID)

html:killhtml
	@echo "Launching http server..."
	@nohup $(HTTPCMD) > $(REPODIR)//http.log &
	@sleep 1
	@echo "See http://localhost:9000"

killjupyter:
	@echo "Killing jupyter instances..."
	@kill -9 $(JPID)

jupyter:killjupyter
	@echo "Launching Jupyter..."
	@nohup $(JUPYCMD) > $(REPODIR)//jupyter.log &
	@sleep 1
	@make listjupyter

#####################################################################
#ONLY FOR REPO TEMPLATE DEVELOPER
#####################################################################
pullall:
	@echo "Pulling new files..."
	@-git reset --hard HEAD
	@-git pull --all

pushreporc:
	@echo "Updating reporc..."
	@-git update-index --no-assume-unchanged $(REPODIR)/reporc
	@-make commit
	@-git update-index --assume-unchanged $(REPODIR)/reporc

edit:files
	@emacs -nw $(shell cat $(REPODIR)/files.list)

